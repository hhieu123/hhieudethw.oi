module.exports.info = {
	name: "busy",
	version: "1.0.0",
	permissions: 1,
	author: {
		name: "hhieu",
		facebook: "https://www.facebook.com/TrungHieu2k9/"
	},
	description: {
        long: "B·∫≠t ho·∫∑c t·∫Øt ch·∫ø ƒë·ªô busy",
        short: "B·∫≠n h·ªü? D√πng ƒëi!"
    },
	group: "D√†nh Cho Th√†nh Vi√™n",
	guide: [
		'[ƒë·ªÉ tr·ªëng ho·∫∑c th√™m l√≠ do]',
	],
	countdown: 20
};

module.exports.handleEvents = async function({ api, event, multiple, Users }) {
    var { senderID, threadID, messageID, mentions } = event;
    var busyList = multiple.busyList;
    if (!busyList) return;
    if (busyList.has(senderID)) {
        var info = await Users.getData(senderID);
        delete info.active;
        await Users.setData(senderID, info);
        return api.sendMessage(`Ch√†o m·ª´ng b·∫°n ƒë√£ quay tr·ªü l·∫°i! ü•∞`, threadID, () => {
            var info = busyList.get(senderID);
            if (info.tag.length == 0) api.sendMessage("Trong l√∫c b·∫°n ƒëi v·∫Øng, kh√¥ng c√≥ ai nh·∫Øc ƒë·∫øn b·∫°n c·∫£!", threadID);
            else {
                var msg = "";
                for (var i of info.tag) {
                    msg += `${i}\n`
                }
                api.sendMessage("ƒê√¢y l√† danh s√°ch nh·ªØng tin nh·∫Øn b·∫°n ƒë∆∞·ª£c tag trong khi b·∫°n ƒëi v·∫Øng:\n\n" + msg, threadID)
            }
            busyList.delete(senderID);
        }, messageID);
    }

    if (!mentions || Object.keys(mentions).length == 0 || senderID == api.getCurrentUserID()) return;
    
    for (const [ID, name] of Object.entries(mentions)) {
        if (busyList.has(ID)) {
            var infoBusy = busyList.get(ID), mentioner = await Users.getData(senderID), replaceName = event.body.replace(`${name}`, "");
            infoBusy.tag.push(`${mentioner.name}:${replaceName == "" ? " ƒê√£ tag b·∫°n 1 l·∫ßn" : replaceName}`)
            busyList.set(ID, infoBusy)
            await Users.setData(ID, { active: infoBusy })
            api.sendMessage(`${name.replace("@", "")} hi·ªán ƒëang b·∫≠n${infoBusy.lido ? ` v·ªõi l√Ω do: ${infoBusy.lido}.` : "."}`, threadID, messageID);
        }
    }
}

module.exports.run = async function({ api, args, event, multiple, Users, tecna }) {
    var fullTime = await tecna.getTime('fullTime');
    const { threadID, senderID, messageID, body } = event;
    var data = await Users.getData(senderID);
    var content = args.join(" "), msg = "";
    if (!data.active || data.active.status == false) {
        await Users.setData(senderID, {
            active: {
                status: true,
                lido: content,
                date: fullTime,
                tag: []
            }
        });
        multiple.busyList.set(senderID, {
            status: true,
            lido: content,
            date: fullTime,
            tag: []
        })
    }
    content.length == 0 ? msg += 'B·∫°n ƒë√£ b·∫≠t ch·∫ø ƒë·ªô busy m√† kh√¥ng c√≥ l√≠ do' : msg += `B·∫°n ƒë√£ b·∫≠t ch·∫ø ƒë·ªô busy v·ªõi l√≠ do: ${content}`;
    return api.sendMessage(msg, threadID, messageID);
}